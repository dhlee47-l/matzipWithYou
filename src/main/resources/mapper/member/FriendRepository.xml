<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.member.repository.FriendRepository">

    <!-- 친구 요청 보내기 -->
    <insert id="sendFriendRequest" parameterType="com.lec.spring.member.domain.Friend" flushCache="true">
        INSERT INTO friend(sender_id, receiver_id, intimacy, is_accept)
        VALUES (#{senderId}, #{receiverId}, #{intimacy}, #{isAccept})
    </insert>

    <!-- 친구 요청 수락-->
    <update id="acceptFriendRequest" parameterType="com.lec.spring.member.domain.Friend" flushCache="true">
        UPDATE friend
        SET is_accept = #{isAccept}
        WHERE receiver_id = #{receiverId} and sender_id = #{senderId}
    </update>

    <!-- 친구 요청 거절 -->
    <delete id="rejectFriendRequest" parameterType="com.lec.spring.member.domain.Friend" flushCache="true">
    DELETE FROM friend
    WHERE receiver_id = #{receiverId} and sender_id = #{senderId}
    </delete>

    <!-- 친구 삭제 -->
    <delete id="deleteFriendById">
        DELETE FROM friend
        WHERE id = #{friendId}
    </delete>

    <!-- 친구 신청 보낼 때 이미 보낸/받은 신청은 아닌지 확인 -->
    <select id="isAlreadyFriend" parameterType="com.lec.spring.member.domain.Friend" resultType="boolean">
        SELECT count(*) FROM friend f
        WHERE (sender_id = #{senderId} and receiver_id = #{receiverId})
           or (sender_id = #{receiverId} and receiver_id = #{senderId})
    </select>

    <!-- 수락된 친구 목록 조회 -->
    <select id="findFriendsWithDetailsDTO" resultType="com.lec.spring.member.domain.FriendDetailsDTO" parameterType="long">
        SELECT
            m.id AS friendId,
            pi.filename AS profileImg,
            m.nickname AS nickname,
            m.username AS username,
            COUNT(CASE WHEN mm.visibility = 'PUBLIC' THEN 1 END) AS publicCount,
            COUNT(CASE WHEN mm.visibility = 'HIDDEN' THEN 1 END) AS hiddenCount,
            f.intimacy AS intimacy
        FROM friend f
                 JOIN member m ON (f.sender_id = m.id OR f.receiver_id = m.id)
                 LEFT JOIN profile_img pi ON m.id = pi.member_id
                 LEFT JOIN my_matzip mm ON m.id = mm.member_id
        WHERE
            (f.sender_id = #{memberId} OR f.receiver_id = #{memberId})
          AND f.is_accept = TRUE
          AND m.id != #{memberId} -- 본인 ID 제외
        GROUP BY
            m.id, pi.filename, m.nickname, m.username, f.intimacy;
    </select>


    <!-- 보낸&받은요청 중 대기상태인 목록 -->
    <select id="findPendingRequests" resultType="com.lec.spring.member.domain.Friend">
        SELECT * FROM friend f
                          JOIN member m ON (f.sender_id = m.id OR f.receiver_id = m.id)
        WHERE m.id = #{id}
          AND f.is_accept = false
    </select>


    <!-- 친밀도 업데이트 -->
    <update id="updateIntimacy" flushCache="true">
        UPDATE friend f
        SET f.intimacy = f.intimacy + #{member.intimacy}
        WHERE f.is_accept = TRUE
          AND (
            (f.sender_id = #{memberId} AND f.receiver_id = #{targetId})
                OR (f.receiver_id = #{memberId} AND f.sender_id = #{targetId})
            )
    </update>

</mapper>